{"ast":null,"code":"import { MIN_NUMBER, MAX_NUMBER } from '../constants/actions';\nexport const initialState = {\n  message: '',\n  playerChoices: [],\n  computerChoices: [],\n  isLoose: false,\n  turn: 'player'\n};\n\nconst verificationOfNumber = () => {// VERIFICATION\n  // POUR : i de 1 a 100\n  // SI : i % nombre donne == 0 -> OK DIVISEUR\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n  // SINON : LOOSE\n};\n\nconst computerChooseNumber = chosenNumber => {\n  // CHOOSE\n  // POUR : i de 1 a 100\n  // SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n  // SINON : JE SUIS BLOQUE\n  for (let i = MIN_NUMBER + 1; i < MAX_NUMBER; i++) {\n    if (i % chosenNumber) {// c'est un diviseur commun\n    } else {\n      for (let j = MIN_NUMBER + 1; j < MAX_NUMBER; j++) {\n        if (i * j === chosenNumber) {// c'est un multiple\n        } else {// TROUVE PAS\n          }\n      }\n    }\n  }\n};\n\nexport const reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_YOUR_CHOICE':\n      console.log('Play Reducer', 'ADD_YOUR_CHOICE');\n      let isAlreadySend = false;\n\n      for (let i = 0; i < state.playerChoices.length || i < state.computerChoices.length; i++) {\n        console.log(state.playerChoices[i]);\n\n        if (state.playerChoices[i] === action.number) {\n          isAlreadySend = true;\n        } else if (state.computerChoices[i] === action.number) {\n          isAlreadySend = true;\n        }\n      }\n\n      if (isAlreadySend) {\n        return { ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        };\n      } else if (action.number) {\n        return { ...state,\n          playerChoices: state.playerChoices.concat(action.number),\n          message: state.message = `You send ${action.number}, computer playing`,\n          turn: state.turn = \"computer\"\n        };\n      } else {\n        return { ...state,\n          message: state.message = \"Sorry, is not a correct entry, please resend\"\n        };\n      }\n\n    case 'ADD_COMPUTER_CHOICE':\n      console.log('Play Reducer', 'ADD_COMPUTER_CHOICE');\n\n      for (let i = MIN_NUMBER + 1; i < MAX_NUMBER; i++) {\n        if (i % state.currentNumber) {// c'est un diviseur commun\n        } else {\n          for (let j = MIN_NUMBER + 1; j < MAX_NUMBER; j++) {\n            if (i * j === state.currentNumber) {// c'est un multiple\n            } else {// TROUVE PAS\n              }\n          }\n        }\n      }\n\n      return { ...state,\n        message: state.message = \"It is your turn\",\n        turn: state.turn = \"player\"\n      };\n\n    case 'RESET':\n      return { ...state,\n        message: '',\n        playerChoices: [],\n        computerChoices: [],\n        isLoose: false,\n        turn: 'player'\n      };\n\n    default:\n      console.log('Play Reducer', 'unrecognised type');\n      return { ...state\n      };\n  }\n}; // CHOOSE\n// POUR : i de 1 a 100\n// SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n// SINON : JE SUIS BLOQUE\n// VERIFICATION\n// POUR : i de 1 a 100\n// SI : i % nombre donne == 0 -> OK DIVISEUR\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n// SINON : LOOSE","map":{"version":3,"sources":["/Users/jeanbapt-sanchez/Documents/school/bddi-2020/gobelins-2020/Semaine-7/J4/game-juniper-green/src/reducers/Play.js"],"names":["MIN_NUMBER","MAX_NUMBER","initialState","message","playerChoices","computerChoices","isLoose","turn","verificationOfNumber","computerChooseNumber","chosenNumber","i","j","reducer","state","action","type","console","log","isAlreadySend","length","number","concat","currentNumber"],"mappings":"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","sourcesContent":["import { MIN_NUMBER, MAX_NUMBER } from '../constants/actions';\n\nexport const initialState = {\n  message: '',\n  playerChoices: [],\n  computerChoices: [],\n  isLoose: false,\n  turn: 'player'\n}\n\nconst verificationOfNumber = () => {\n  // VERIFICATION\n  // POUR : i de 1 a 100\n  // SI : i % nombre donne == 0 -> OK DIVISEUR\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n  // SINON : LOOSE\n}\n\nconst computerChooseNumber = (chosenNumber) => {\n  // CHOOSE\n  // POUR : i de 1 a 100\n  // SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n  // SINON : JE SUIS BLOQUE\n\n  for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n    if (i % chosenNumber) {\n      // c'est un diviseur commun\n    } else {\n      for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n        if ((i * j) === chosenNumber ) {\n          // c'est un multiple\n        } else {\n          // TROUVE PAS\n        }\n      }\n    }\n  }\n\n}\n\nexport const reducer = (state = {}, action) => {\n  switch(action.type) {\n    case 'ADD_YOUR_CHOICE':\n      console.log('Play Reducer', 'ADD_YOUR_CHOICE')\n\n      let isAlreadySend = false;\n      for (let i = 0; i < state.playerChoices.length || i < state.computerChoices.length; i++) {\n        console.log(state.playerChoices[i]);\n        if (state.playerChoices[i] === action.number) {\n          isAlreadySend = true\n        } else if (state.computerChoices[i] === action.number) {\n          isAlreadySend = true\n        }\n      }\n\n      if (isAlreadySend) {\n        return {\n          ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        }\n      } else if (action.number) {\n        return {\n          ...state,\n          playerChoices: state.playerChoices.concat(action.number),\n          message: state.message = `You send ${action.number}, computer playing`,\n          turn: state.turn = \"computer\"\n        }\n      } else {\n        return {\n          ...state,\n          message: state.message = \"Sorry, is not a correct entry, please resend\"\n        }\n      }\n\n    case 'ADD_COMPUTER_CHOICE':\n      console.log('Play Reducer', 'ADD_COMPUTER_CHOICE')\n\n      for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n        if (i % state.currentNumber) {\n          // c'est un diviseur commun\n        } else {\n          for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n            if ((i * j) === state.currentNumber ) {\n              // c'est un multiple\n            } else {\n              // TROUVE PAS\n            }\n          }\n        }\n      }\n\n      return {\n        ...state,\n        message: state.message = \"It is your turn\",\n        turn: state.turn = \"player\"\n      }\n    case 'RESET':\n      return {\n        ...state,\n        message: '',\n        playerChoices: [],\n        computerChoices: [],\n        isLoose: false,\n        turn: 'player'\n      }\n    default:\n      console.log('Play Reducer', 'unrecognised type')\n      return {\n        ...state\n      }\n  }\n}\n\n// CHOOSE\n// POUR : i de 1 a 100\n// SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n// SINON : JE SUIS BLOQUE\n\n// VERIFICATION\n// POUR : i de 1 a 100\n// SI : i % nombre donne == 0 -> OK DIVISEUR\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n// SINON : LOOSE\n"]},"metadata":{},"sourceType":"module"}