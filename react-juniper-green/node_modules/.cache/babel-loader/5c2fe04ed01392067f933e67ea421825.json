{"ast":null,"code":"import { MIN_NUMBER, MAX_NUMBER } from '../constants/Actions';\nexport const initialState = {\n  message: '',\n  currentNumber: 4,\n  playerChoices: [],\n  computerChoices: [],\n  isLoose: false,\n  isVictory: false,\n  turn: 'player'\n};\n\nconst verifySendingNumber = number => {\n  let isAlreadySend = false;\n\n  for (let i = 0; i < state.playerChoices.length || i < state.computerChoices.length; i++) {\n    if (state.playerChoices[i] === action.number) {\n      isAlreadySend = true;\n    } else if (state.computerChoices[i] === action.number) {\n      isAlreadySend = true;\n    }\n  }\n};\n\nconst verifyNumber = () => {// VERIFICATION\n  // POUR : i de 1 a 100\n  // SI : i % nombre donne == 0 -> OK DIVISEUR\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n  // SINON : LOOSE\n};\n\nconst computerChooseNumber = chosenNumber => {\n  // CHOOSE\n  // POUR : i de 1 a 100\n  // SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n  // SINON : JE SUIS BLOQUE\n  for (let i = MIN_NUMBER + 1; i < MAX_NUMBER; i++) {\n    if (i % chosenNumber) {\n      // c'est un diviseur commun\n      return i;\n    } else {\n      for (let j = MIN_NUMBER + 1; j < MAX_NUMBER; j++) {\n        if (j * i === chosenNumber) {\n          // c'est un multiple\n          return j;\n        } else {\n          // TROUVE PAS\n          return false;\n        }\n      }\n    }\n  }\n};\n\nexport const reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_YOUR_CHOICE':\n      console.log('Play Reducer', 'ADD_YOUR_CHOICE');\n      let isAlreadySend = false;\n\n      for (let i = 0; i < state.playerChoices.length || i < state.computerChoices.length; i++) {\n        console.log(state.playerChoices[i]);\n\n        if (state.playerChoices[i] === action.number) {\n          isAlreadySend = true;\n        } else if (state.computerChoices[i] === action.number) {\n          isAlreadySend = true;\n        }\n      }\n\n      if (isAlreadySend) {\n        return { ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        };\n      } else if (action.number) {\n        return { ...state,\n          message: state.message = `You send ${action.number}, computer playing`,\n          currentNumber: action.number,\n          playerChoices: state.playerChoices.concat(action.number),\n          turn: state.turn = \"computer\"\n        };\n      } else {\n        return { ...state,\n          message: state.message = \"Sorry, is not a correct entry, please resend\"\n        };\n      }\n\n    case 'ADD_COMPUTER_CHOICE':\n      console.log('Play Reducer', 'ADD_COMPUTER_CHOICE');\n      const iaResultat = computerChooseNumber(state.currentNumber);\n\n      if (!iaResultat) {\n        // BLOQUE\n        return { ...state,\n          message: state.message = \"You won the game\",\n          isVictory: state.isVictory = true\n        };\n      } else {\n        return { ...state,\n          message: state.message = \"It is your turn\",\n          currentNumber: iaResultat,\n          computerChoices: state.playerChoices.concat(action.number),\n          turn: state.turn = \"player\"\n        };\n      } // for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n      //   if (i % state.currentNumber) {\n      //     // c'est un diviseur commun\n      //     return {\n      //       ...state,\n      //       message: state.message = \"It is your turn\",\n      //       currentNumber: i,\n      //       computerChoices: state.playerChoices.concat(action.number),\n      //       turn: state.turn = \"player\"\n      //     }\n      //   } else {\n      //     for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n      //       if ((j * i) === state.currentNumber ) {\n      //         // c'est un multiple\n      //         return {\n      //           ...state,\n      //           message: state.message = \"It is your turn\",\n      //           currentNumber: j,\n      //           turn: state.turn = \"player\"\n      //         }\n      //       } else {\n      //         // TROUVE PAS\n      //       }\n      //     }\n      //   }\n      // }\n\n\n      return { ...state,\n        message: state.message = \"It is your turn\",\n        turn: state.turn = \"player\"\n      };\n\n    case 'RESET':\n      return { ...state,\n        message: '',\n        playerChoices: [],\n        computerChoices: [],\n        isLoose: false,\n        turn: 'player'\n      };\n\n    default:\n      console.log('Play Reducer', 'unrecognised type');\n      return { ...state\n      };\n  }\n}; // CHOOSE\n// POUR : i de 1 a 100\n// SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n// SINON : JE SUIS BLOQUE\n// VERIFICATION\n// POUR : i de 1 a 100\n// SI : i % nombre donne == 0 -> OK DIVISEUR\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n// SINON : LOOSE","map":{"version":3,"sources":["/Users/jeanbapt-sanchez/Documents/school/bddi-2020/gobelins-2020/Semaine-7/J4/game-juniper-green/src/reducers/Play.js"],"names":["MIN_NUMBER","MAX_NUMBER","initialState","message","currentNumber","playerChoices","computerChoices","isLoose","isVictory","turn","verifySendingNumber","number","isAlreadySend","i","state","length","action","verifyNumber","computerChooseNumber","chosenNumber","j","reducer","type","console","log","concat","iaResultat"],"mappings":"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","sourcesContent":["import { MIN_NUMBER, MAX_NUMBER } from '../constants/Actions';\n\nexport const initialState = {\n  message: '',\n  currentNumber: 4,\n  playerChoices: [],\n  computerChoices: [],\n  isLoose: false,\n  isVictory: false,\n  turn: 'player',\n}\n\nconst verifySendingNumber = (number) => {\n  let isAlreadySend = false;\n  for (let i = 0; i < state.playerChoices.length || i < state.computerChoices.length; i++) {\n    if (state.playerChoices[i] === action.number) {\n      isAlreadySend = true\n    } else if (state.computerChoices[i] === action.number) {\n      isAlreadySend = true\n    }\n  }\n}\n\nconst verifyNumber = () => {\n\n  // VERIFICATION\n  // POUR : i de 1 a 100\n  // SI : i % nombre donne == 0 -> OK DIVISEUR\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n  // SINON : LOOSE\n}\n\nconst computerChooseNumber = (chosenNumber) => {\n  // CHOOSE\n  // POUR : i de 1 a 100\n  // SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n  // SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n  // SINON : JE SUIS BLOQUE\n\n  for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n    if (i % chosenNumber) {\n      // c'est un diviseur commun\n      return i\n    } else {\n      for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n        if ((j * i) === chosenNumber ) {\n          // c'est un multiple\n          return j\n        } else {\n          // TROUVE PAS\n          return false\n        }\n      }\n    }\n  }\n}\n\nexport const reducer = (state = {}, action) => {\n  switch(action.type) {\n    case 'ADD_YOUR_CHOICE':\n      console.log('Play Reducer', 'ADD_YOUR_CHOICE')\n\n      let isAlreadySend = false;\n      for (let i = 0; i < state.playerChoices.length || i < state.computerChoices.length; i++) {\n        console.log(state.playerChoices[i]);\n        if (state.playerChoices[i] === action.number) {\n          isAlreadySend = true\n        } else if (state.computerChoices[i] === action.number) {\n          isAlreadySend = true\n        }\n      }\n\n      if (isAlreadySend) {\n        return {\n          ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        }\n      } else if (action.number) {\n        return {\n          ...state,\n          message: state.message = `You send ${action.number}, computer playing`,\n          currentNumber: action.number,\n          playerChoices: state.playerChoices.concat(action.number),\n          turn: state.turn = \"computer\"\n        }\n      } else {\n        return {\n          ...state,\n          message: state.message = \"Sorry, is not a correct entry, please resend\"\n        }\n      }\n\n    case 'ADD_COMPUTER_CHOICE':\n      console.log('Play Reducer', 'ADD_COMPUTER_CHOICE')\n\n      const iaResultat = computerChooseNumber(state.currentNumber)\n      if (!iaResultat) {\n        // BLOQUE\n        return {\n          ...state,\n          message: state.message = \"You won the game\",\n          isVictory: state.isVictory = true\n        }\n      } else {\n          return {\n            ...state,\n            message: state.message = \"It is your turn\",\n            currentNumber: iaResultat,\n            computerChoices: state.playerChoices.concat(action.number),\n            turn: state.turn = \"player\"\n          }\n      }\n\n      // for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n      //   if (i % state.currentNumber) {\n      //     // c'est un diviseur commun\n      //     return {\n      //       ...state,\n      //       message: state.message = \"It is your turn\",\n      //       currentNumber: i,\n      //       computerChoices: state.playerChoices.concat(action.number),\n      //       turn: state.turn = \"player\"\n      //     }\n      //   } else {\n      //     for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n      //       if ((j * i) === state.currentNumber ) {\n      //         // c'est un multiple\n      //         return {\n      //           ...state,\n      //           message: state.message = \"It is your turn\",\n      //           currentNumber: j,\n      //           turn: state.turn = \"player\"\n      //         }\n      //       } else {\n      //         // TROUVE PAS\n      //       }\n      //     }\n      //   }\n      // }\n\n      return {\n        ...state,\n        message: state.message = \"It is your turn\",\n        turn: state.turn = \"player\"\n      }\n    case 'RESET':\n      return {\n        ...state,\n        message: '',\n        playerChoices: [],\n        computerChoices: [],\n        isLoose: false,\n        turn: 'player'\n      }\n    default:\n      console.log('Play Reducer', 'unrecognised type')\n      return {\n        ...state\n      }\n  }\n}\n\n// CHOOSE\n// POUR : i de 1 a 100\n// SI : i % nombre choisi == 0 -> diviseurs communs donc on repond\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre choisi -> multiple donc on repond\n// SINON : JE SUIS BLOQUE\n\n// VERIFICATION\n// POUR : i de 1 a 100\n// SI : i % nombre donne == 0 -> OK DIVISEUR\n// SINON SI : POUR : j de 1 a 100 -> i * j == nombre donne -> OK MULTIPLE\n// SINON : LOOSE\n"]},"metadata":{},"sourceType":"module"}