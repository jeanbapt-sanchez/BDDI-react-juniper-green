{"ast":null,"code":"import { MIN_NUMBER, MAX_NUMBER } from '../constants/Actions';\nexport const initialState = {\n  message: '',\n  currentNumber: 4,\n  playerChoices: [],\n  computerChoices: [],\n  isLoose: false,\n  isVictory: false,\n  turn: 'player'\n};\n\nconst verifySendingNumber = (playerChoices, computerChoices, number) => {\n  for (let i = 0; i < playerChoices.length || i < computerChoices.length; i++) {\n    if (playerChoices[i] === number) {\n      return true;\n    } else if (computerChoices[i] === number) {\n      return false;\n    }\n  }\n};\n\nconst verifyNumber = number => {\n  if (number > MIN_NUMBER && number < MAX_NUMBER) {\n    return false;\n  } else {\n    for (let i = MIN_NUMBER + 1; i < MAX_NUMBER; i++) {\n      if (i % number) {\n        // c'est un diviseur commun\n        console.log('Ok : Diviseur');\n        return true;\n      } else {\n        for (let j = MIN_NUMBER + 1; j < MAX_NUMBER; j++) {\n          if (j * i === number) {\n            // c'est un multiple\n            console.log('Ok : Multiple');\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n};\n\nexport const reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_YOUR_CHOICE':\n      console.log('Play Reducer', 'ADD_YOUR_CHOICE');\n      const isAlreadySend = verifySendingNumber(state.playerChoices, state.computerChoices, action.number);\n      const isNotDivisorOrMultiple = verifyNumber(action.number);\n      console.log(isDivisorOrMultiple);\n\n      if (isDivisorOrMultiple) {\n        return { ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        };\n      }\n\n      if (isAlreadySend) {\n        return { ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        };\n      } else if (action.number) {\n        return { ...state,\n          message: state.message = `You send ${action.number}, computer playing`,\n          currentNumber: action.number,\n          playerChoices: state.playerChoices.concat(action.number),\n          turn: state.turn = \"computer\"\n        };\n      } else {\n        return { ...state,\n          message: state.message = \"Sorry, is not a correct entry, please resend\"\n        };\n      }\n\n    case 'ADD_COMPUTER_CHOICE':\n      console.log('Play Reducer', 'ADD_COMPUTER_CHOICE'); // Algo determinage partiel d'un coup\n      // let iaResultat = null\n      // for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n      //   if (i % state.currentNumber && !state.computerChoices.includes(i) && !state.playerChoices.includes(i)) {\n      //     // c'est un diviseur commun\n      //     iaResultat = i\n      //   } else {\n      //     for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n      //       if ((j * i) === state.currentNumber && !state.computerChoices.includes(j) && !state.playerChoices.includes(j)) {\n      //         // c'est un multiple\n      //         iaResultat = j\n      //       }\n      //     }\n      //   }\n      // }\n\n      let iaResultat = Math.floor(Math.random() * (100 - 0) + 0);\n      console.log(iaResultat);\n\n      if (verifyNumber(iaResultat) && !state.computerChoices.includes(iaResultat) && !state.playerChoices.includes(iaResultat)) {\n        return { ...state,\n          message: state.message = \"It is your turn\",\n          currentNumber: iaResultat,\n          computerChoices: state.computerChoices.concat(iaResultat),\n          turn: state.turn = \"player\"\n        };\n      } else {\n        return { ...state,\n          message: state.message = \"You won the game\",\n          currentNumber: iaResultat,\n          computerChoices: state.computerChoices.concat(iaResultat),\n          isVictory: state.isVictory = true\n        };\n      }\n\n    case 'RESET':\n      return { ...state,\n        message: '',\n        playerChoices: [],\n        computerChoices: [],\n        isLoose: false,\n        turn: 'player'\n      };\n\n    default:\n      console.log('Play Reducer', 'unrecognised type');\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["/Users/jeanbapt-sanchez/Documents/school/bddi-2020/gobelins-2020/Semaine-7/J4/game-juniper-green/src/reducers/Play.js"],"names":["MIN_NUMBER","MAX_NUMBER","initialState","message","currentNumber","playerChoices","computerChoices","isLoose","isVictory","turn","verifySendingNumber","number","i","length","verifyNumber","console","log","j","reducer","state","action","type","isAlreadySend","isNotDivisorOrMultiple","isDivisorOrMultiple","concat","iaResultat","Math","floor","random","includes"],"mappings":"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","sourcesContent":["import { MIN_NUMBER, MAX_NUMBER } from '../constants/Actions';\n\nexport const initialState = {\n  message: '',\n  currentNumber: 4,\n  playerChoices: [],\n  computerChoices: [],\n  isLoose: false,\n  isVictory: false,\n  turn: 'player',\n}\n\nconst verifySendingNumber = (playerChoices, computerChoices, number) => {\n  for (let i = 0; i < playerChoices.length || i < computerChoices.length; i++) {\n    if (playerChoices[i] === number) {\n      return true\n    } else if (computerChoices[i] === number) {\n      return false\n    }\n  }\n}\n\nconst verifyNumber = (number) => {\n  if (number > MIN_NUMBER && number < MAX_NUMBER)  {\n    return false\n  } else {\n    for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n      if (i % number) {\n        // c'est un diviseur commun\n        console.log('Ok : Diviseur');\n        return true\n      } else {\n        for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n          if ((j * i) === number) {\n            // c'est un multiple\n            console.log('Ok : Multiple');\n            return true\n          }\n        }\n      }\n    }\n    return false\n  }\n}\n\nexport const reducer = (state = {}, action) => {\n  switch(action.type) {\n    case 'ADD_YOUR_CHOICE':\n      console.log('Play Reducer', 'ADD_YOUR_CHOICE')\n\n      const isAlreadySend = verifySendingNumber(state.playerChoices, state.computerChoices, action.number)\n      const isNotDivisorOrMultiple = verifyNumber(action.number)\n      console.log(isDivisorOrMultiple);\n\n      if (isDivisorOrMultiple) {\n        return {\n          ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        }\n      }\n\n      if (isAlreadySend) {\n        return {\n          ...state,\n          message: state.message = \"This number was already send, you loose\",\n          isLoose: state.isLoose = true\n        }\n      } else if (action.number) {\n        return {\n          ...state,\n          message: state.message = `You send ${action.number}, computer playing`,\n          currentNumber: action.number,\n          playerChoices: state.playerChoices.concat(action.number),\n          turn: state.turn = \"computer\"\n        }\n      } else {\n        return {\n          ...state,\n          message: state.message = \"Sorry, is not a correct entry, please resend\"\n        }\n      }\n\n    case 'ADD_COMPUTER_CHOICE':\n      console.log('Play Reducer', 'ADD_COMPUTER_CHOICE')\n\n      // Algo determinage partiel d'un coup\n      // let iaResultat = null\n      // for (let i = MIN_NUMBER+1; i < MAX_NUMBER; i++) {\n      //   if (i % state.currentNumber && !state.computerChoices.includes(i) && !state.playerChoices.includes(i)) {\n      //     // c'est un diviseur commun\n      //     iaResultat = i\n      //   } else {\n      //     for (let j = MIN_NUMBER+1; j < MAX_NUMBER; j++) {\n      //       if ((j * i) === state.currentNumber && !state.computerChoices.includes(j) && !state.playerChoices.includes(j)) {\n      //         // c'est un multiple\n      //         iaResultat = j\n      //       }\n      //     }\n      //   }\n      // }\n\n      let iaResultat = Math.floor(Math.random() * (100 - 0) + 0)\n      console.log(iaResultat);\n\n      if (verifyNumber(iaResultat) && !state.computerChoices.includes(iaResultat) && !state.playerChoices.includes(iaResultat)){\n        return {\n          ...state,\n          message: state.message = \"It is your turn\",\n          currentNumber: iaResultat,\n          computerChoices: state.computerChoices.concat(iaResultat),\n          turn: state.turn = \"player\"\n        }\n      } else {\n        return {\n          ...state,\n          message: state.message = \"You won the game\",\n          currentNumber: iaResultat,\n          computerChoices: state.computerChoices.concat(iaResultat),\n          isVictory: state.isVictory = true\n        }\n      }\n\n    case 'RESET':\n      return {\n        ...state,\n        message: '',\n        playerChoices: [],\n        computerChoices: [],\n        isLoose: false,\n        turn: 'player'\n      }\n    default:\n      console.log('Play Reducer', 'unrecognised type')\n      return {\n        ...state\n      }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}